// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wDs7k7ubHzuKh3ioqPnFhb
// Component: xhcd-74Zw-KQ
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: ZgduPyEojWLl/component
import Button from "../../Button"; // plasmic-import: gT-lQgwg5epa/component
import { useScreenVariants as useScreenVariants_6HNd7CJfhEm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6HNd_7CJfhEM/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: wDs7k7ubHzuKh3ioqPnFhb/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: xhcd-74Zw-KQ/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6HNd7CJfhEm()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oYaGe)}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          smallLogo={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? undefined
              : undefined
          }
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nOs4Z)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__fg20H)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__otzSg)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__tfWjK)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"Product"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__sTwyd)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__wwg3H)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___4TdUa)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"Purchase"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___3Gwi2)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___1O3Sw)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__cdC4I)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"How it Work"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__hOrK)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__nE24F)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___12Br9)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"About us"}
          </Button>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__jg1Ox)}>
          <Button
            className={classNames("__wab_instance", sty.button___2ApWa)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___4DRju)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__b66C3)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"Log in"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__w5Nz)}
            color={"navLinkBlue"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__jf8Dy)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___4CwkK)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {"Sign Up"}
          </Button>
        </div>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
